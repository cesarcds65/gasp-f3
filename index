<!DOCTYPE html>
<html lang="pt-br">
<head>
  <meta charset="UTF-8">
  <title>VOZETA - App Acessível</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">

  <style>
    :root {
      --bg-color: #004d40;
      --primary-color: #4CAF50;
      --secondary-color: #2e7d32;
      --text-color: #ffffff;
      --input-bg: #002923;
    }

    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }

    body {
      margin: 0;
      font-family: Arial, sans-serif;
      background-color: var(--bg-color);
      color: var(--text-color);
      display: flex;
      justify-content: center;
      align-items: center;
      min-height: 100vh;
      transition: background-color 0.3s ease;
    }

    .app-container {
      max-width: 600px;
      width: 100%;
      margin: 0 auto;
      padding: 20px;
    }

    .container {
      width: 100%;
      text-align: center;
      padding: 20px;
      display: none;
      overflow-y: auto;
    }

    .active {
      display: block;
    }

    .logo {
      font-size: 3.5rem;
      color: var(--primary-color);
      margin: 20px 0;
      font-weight: bold;
    }

    h1 {
      color: var(--primary-color);
      font-size: 2.5rem;
      margin-bottom: 10px;
    }

    h2 {
      color: var(--primary-color);
      font-size: 2rem;
      margin: 10px 0;
    }

    p {
      font-size: 1.1rem;
      margin: 15px 0;
      line-height: 1.4;
    }

    .welcome-text {
      font-size: 1.8rem;
      margin: 15px 0;
      font-weight: bold;
    }

    .description {
      font-size: 1.1rem;
      margin: 20px 0;
      line-height: 1.5;
      text-align: center;
    }

    label {
      display: block;
      text-align: left;
      margin: 15px 0 8px 0;
      font-size: 1.1rem;
    }

    input[type="text"] {
      width: 100%;
      padding: 12px;
      font-size: 1rem;
      border: 2px solid var(--primary-color);
      border-radius: 8px;
      background-color: var(--input-bg);
      color: white;
      box-sizing: border-box;
    }

    input[type="range"] {
      width: 100%;
      margin: 10px 0;
      -webkit-appearance: none;
      height: 8px;
      background: linear-gradient(to right, var(--primary-color) 50%, var(--bg-color) 50%);
      border-radius: 5px;
      outline: none;
    }

    input[type="range"]::-webkit-slider-thumb {
      -webkit-appearance: none;
      appearance: none;
      width: 20px;
      height: 20px;
      border-radius: 50%;
      background: var(--primary-color);
      cursor: pointer;
    }

    button {
      width: 100%;
      background-color: var(--primary-color);
      color: white;
      border: none;
      padding: 15px;
      margin: 15px 0;
      font-size: 1.1rem;
      border-radius: 10px;
      cursor: pointer;
      display: flex;
      justify-content: center;
      align-items: center;
      transition: background-color 0.2s;
    }

    button:hover {
      background-color: #45a049;
    }

    button i {
      margin-right: 10px;
    }

    .info {
      display: flex;
      align-items: flex-start;
      margin-top: 20px;
      text-align: left;
    }

    .info-icon {
      background-color: var(--primary-color);
      color: white;
      border-radius: 50%;
      width: 25px;
      height: 25px;
      display: flex;
      justify-content: center;
      align-items: center;
      margin-right: 10px;
      flex-shrink: 0;
    }

    .info-text {
      font-size: 1rem;
      line-height: 1.3;
    }

    .speech-box {
      background-color: var(--secondary-color);
      padding: 20px;
      border-radius: 10px;
      margin: 20px 0;
      text-align: left;
    }

    .icon-container {
      margin: 20px 0;
      display: flex;
      justify-content: center;
    }

    .icon-sound {
      font-size: 2.5rem;
      color: var(--primary-color);
    }

    .icon-code {
      width: 120px;
      height: 120px;
      background-color: var(--secondary-color);
      border-radius: 20px;
      display: flex;
      justify-content: center;
      align-items: center;
      position: relative;
    }

    .icon-code::before {
      content: "</>";
      color: #a5d6a7;
      font-size: 2.5rem;
      font-weight: bold;
    }

    .icon-code::after {
      content: "";
      position: absolute;
      right: -15px;
      top: 20px;
      width: 15px;
      height: 30px;
      border-radius: 0 15px 15px 0;
      background-color: var(--primary-color);
      box-shadow: 0 0 0 5px var(--bg-color), 15px 15px 0 5px var(--primary-color), 15px 15px 0 10px var(--bg-color);
    }

    .database-status {
      font-size: 0.8rem;
      color: #a5d6a7;
      margin-top: 20px;
      text-align: center;
    }

    /* Tela 4 estilos */
    .concept-section {
      margin: 20px 0;
      text-align: left;
    }

    .concept-title {
      color: var(--primary-color);
      font-size: 1.3rem;
      margin-bottom: 10px;
      font-weight: bold;
    }

    .concept-code {
      background-color: #002923;
      padding: 15px;
      border-radius: 8px;
      font-family: monospace;
      margin: 10px 0;
      overflow-x: auto;
      white-space: pre-wrap;
      color: #e0e0e0;
      border-left: 3px solid var(--primary-color);
    }

    /* Botões na mesma linha */
    .button-group {
      display: flex;
      justify-content: space-between;
      gap: 15px;
    }

    .button-group button {
      flex: 1;
    }

    .develop-button {
      background-color: var(--secondary-color);
    }

    /* Responsividade */
    @media (max-width: 480px) {
      .app-container {
        padding: 10px;
      }
    }
  </style>
</head>
<body>
  <div class="app-container">
   <!-- Tela 1 -->
<div id="tela1" class="container active">
  <div class="icon-container">
    <svg class="icon-sound" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" width="250" height="250">
      <path d="M3 9v6h4l5 5V4L7 9H3zm13.5 3c0-1.77-1.02-3.29-2.5-4.03v8.05c1.48-.73 2.5-2.25 2.5-4.02z"/>
    </svg>
  </div>
  <h1 class="logo">VOZETA</h1>
  <p class="welcome-text">Bem-vindo(a) ao VOZETA!</p>
  <p class="description">Uma plataforma feita para você aprender programação de forma acessível, guiada por voz e adaptada às suas necessidades.</p>

  <!-- NOVO SLIDER GLOBAL DE FONTE ATUALIZADO -->
  <input type="range" id="tamanhoTexto" min="12" max="24" value="16" step="1"
       oninput="ajustarFonteGlobal(this.value)"
       style="width: 100%; appearance: none; height: 8px; border-radius: 5px;
              background: linear-gradient(to right, #007acc 33%, #ccc 33%);
              outline: none; transition: background 0.3s;">
<label for="tamanhoTexto" style="display: block; text-align: left; font-weight: bold; margin-top: 8px;">
  Tamanho do texto
</label>

  <button onclick="ativarLeituraGlobal()">
    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="currentColor" style="margin-right: 10px;">
      <path d="M3 9v6h4l5 5V4L7 9H3zm13.5 3c0-1.77-1.02-3.29-2.5-4.03v8.05c1.48-.73 2.5-2.25 2.5-4.02z"/>
    </svg>
    Ativar leitura em voz alta
  </button>

  <button onclick="irPara('tela2')">
    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="currentColor" style="margin-right: 10px;">
      <path d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"/>
    </svg>
    Iniciar cadastro
  </button>

  <button onclick="mostrarInfo()">
    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="currentColor" style="margin-right: 10px;">
      <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-6h2v6zm0-8h-2V7h2v2z"/>
    </svg>
    O que é o VOZETA?
  </button>
</div>


    <!-- Tela 2 -->
    <div id="tela2" class="container">
      <h1 class="logo">VOZETA</h1>
      <h2>Iniciar cadastro</h2>

      <label for="nome">Nome</label>
      <input type="text" id="nome" placeholder="Digite seu nome">

      <label for="velocidade">Velocidade da leitura</label>
      <input type="range" id="velocidade" min="0.5" max="2" step="0.1" value="1.2" oninput="ajustarVelocidade(this.value)">

      <label for="contraste">Contraste da tela</label>
      <input type="range" id="contraste" min="0" max="100" value="50" oninput="ajustarContraste(this.value)">

      <button onclick="validarEAvancar()">Avançar</button>

      <div class="info">
        <div class="info-icon"></div>
        <div class="info-text">Contraste da tela mais alto pode facilitar a leitura</div>
      </div>
    </div>

    <!-- Tela 3 -->
    <div id="tela3" class="container">
      <h1 class="logo">VOZETA</h1>
      <div class="speech-box">
        <p>Para começar, vou te guiar pelos conceitos básicos de HTML, CSS e JavaScript.</p>
      </div>
      
      <div class="icon-container">
        <div class="icon-code"></div>
      </div>
      
      <div class="button-group">
        <button onclick="irPara('tela4')">Continuar</button>
        <button onclick="irPara('telaDesenvolver')" class="develop-button">
          <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="currentColor" style="margin-right: 10px;">
            <path d="M9.4 16.6L4.8 12l4.6-4.6L8 6l-6 6 6 6 1.4-1.4zm5.2 0l4.6-4.6-4.6-4.6L16 6l6 6-6 6-1.4-1.4z"/>
          </svg>
          Desenvolver agora
        </button>
      </div>
    </div>

    <!-- Tela 4 (Nova) -->
    <div id="tela4" class="container">
      <h1 class="logo">VOZETA</h1>
      <h2>Conceitos Básicos</h2>
      
      <div class="concept-section">
        <p class="concept-title">HTML - Estrutura</p>
        <p>HTML é a linguagem de marcação que define a estrutura do seu conteúdo web.</p>
        <div class="concept-code">&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;Minha página&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;h1&gt;Olá mundo!&lt;/h1&gt;
    &lt;p&gt;Este é um parágrafo.&lt;/p&gt;
  &lt;/body&gt;
&lt;/html&gt;</div>
      </div>
      
      <div class="concept-section">
        <p class="concept-title">CSS - Estilo</p>
        <p>CSS é a linguagem que estiliza e formata os elementos HTML.</p>
        <div class="concept-code">body {
  background-color: #f0f0f0;
  font-family: Arial, sans-serif;
}

h1 {
  color: blue;
  text-align: center;
}</div>
      </div>
      
      <div class="concept-section">
        <p class="concept-title">JavaScript - Interatividade</p>
        <p>JavaScript permite adicionar comportamento e interatividade à página.</p>
        <div class="concept-code">// Função para mostrar uma mensagem
function mostrarMensagem() {
  alert('Olá! Bem-vindo ao mundo da programação!');
}

// Adicionar evento de clique a um botão
document.getElementById('meuBotao').addEventListener(
  'click', mostrarMensagem
);</div>
      </div>
      
      <button onclick="voltarParaTela3()">Voltar</button>
      <button onclick="proximaLicao()">Próxima Lição</button>
      
      <div class="database-status">
        <p>Progresso salvo no banco de dados</p>
      </div>
    </div>
  
<!-- Tela 5: Editor de HTML com ditado multilíngue -->
<div id="telaDesenvolver" class="container">
  <h1 class="logo">VOZETA</h1>
  <h2>Editor HTML</h2>

  <p class="description">Digite ou dite seu código HTML abaixo e veja o resultado ao vivo:</p>

  <textarea id="editorHtml" placeholder="Escreva seu HTML aqui..." style="width: 100%; height: 200px; font-family: monospace; font-size: 1rem; padding: 10px; border-radius: 8px;"></textarea>

  <div class="button-group">
  <button onclick="executarHtml()">Executar</button>
  <button onclick="iniciarDitado()">Ditar</button>
  <button onclick="apagarCaractereComCursor()">Apagar</button>
  <button onclick="inserirEsqueletoHtml()">Código</button>
</div>

  <h3 style="margin-top: 20px; margin-bottom: 8px;">Visualização:</h3>

<iframe id="previewHtml"
        style="width: 100%; height: 300px; border: 1px solid #ccc; border-radius: 8px; background-color: white;">
</iframe>

<!-- Botão exportar abaixo do preview, alinhado ao centro -->
<div id="exportarContainer" style="display: none; text-align: center; margin-top: 16px;">
  <button onclick="exportarCodigo()" style="padding: 12px 24px; font-size: 1rem; font-weight: bold; background-color: var(--primary-color); color: white; border: none; border-radius: 8px; cursor: pointer;">
    Exportar código
  </button>
</div>

  <script>

    const telas = ['tela1', 'tela2', 'tela3', 'tela4', 'telaDesenvolver'];

    // Variáveis globais
    let velocidadeFala = 1.2;
    let nomeUsuario = '';
    let progressoUsuario = {
      aulas_concluidas: 0,
      ultimo_acesso: new Date().toISOString()
    };
    
    // Banco de dados simulado
    const bancoDeDados = {
      usuarios: [],
      preferencias: [],
      navegacao: [],
      progresso: []
    };
    
    // API de síntese de voz mais intuitiva
    function lerTexto(texto) {
      if (!texto) {
        texto = "Bem-vindo ao VOZETA! Uma plataforma feita para você aprender programação de forma acessível, guiada por voz e adaptada às suas necessidades.";
      }
      
      // Verifica se a API de fala está disponível
      if ('speechSynthesis' in window) {
        // Cancela qualquer fala anterior
        window.speechSynthesis.cancel();
        
        const fala = new SpeechSynthesisUtterance(texto);
        fala.lang = 'pt-BR';
        fala.rate = velocidadeFala;
        fala.pitch = 1.0;
        fala.volume = 1.0;
        
        // Tenta encontrar uma voz em português
        const vozes = window.speechSynthesis.getVoices();
        const vozPT = vozes.find(voz => voz.lang.includes('pt'));
        if (vozPT) fala.voice = vozPT;
        
        window.speechSynthesis.speak(fala);
      } else {
        console.log("API de síntese de voz não suportada neste navegador.");
        alert("Seu navegador não suporta leitura em voz alta.");
      }
    }
    // Função aumentar texto global
    function ajustarFonteGlobal(valor) {
  document.querySelectorAll('*').forEach(el => {
    el.style.fontSize = valor + 'px';
  });

  const slider = document.getElementById('tamanhoTexto');
  if (slider) {
    const percent = ((valor - slider.min) / (slider.max - slider.min)) * 100;
    slider.style.background = `linear-gradient(to right, #007acc ${percent}%, #ccc ${percent}%)`;
  }
}

   function configurarLeituraPorHover() {
  let timer = null;

  document.body.addEventListener('mouseover', function (event) {
    if (!leituraAtiva) return;

    const alvo = event.target;
    let texto = '';

    if (alvo.tagName === 'BUTTON') {
      texto = `Botão ${alvo.innerText.trim()}`;
    } else if (alvo.tagName === 'INPUT' && alvo.type === 'range') {
      texto = 'Controle deslizante';
    } else if (alvo.tagName === 'LABEL') {
      texto = alvo.innerText.trim();
    } else if (['P', 'H1', 'H2', 'H3', 'SPAN'].includes(alvo.tagName)) {
      texto = alvo.innerText.trim();
    }

    if (texto) {
      // Cancela qualquer leitura anterior pendente
      clearTimeout(timer);
      timer = setTimeout(() => {
        lerTexto(texto);
      }, 1000); // aguarda 1 segundo parado no elemento
    }
  });

  // Se mover o mouse para outro elemento, cancela o timer
  document.body.addEventListener('mouseout', function () {
    clearTimeout(timer);
  });
}
    
    // Ajuste de velocidade da fala
    function ajustarVelocidade(valor) {
      velocidadeFala = parseFloat(valor);
      // Atualiza o valor no banco de dados
      salvarPreferenciasUsuario();
    }

    // Ajuste de contraste
    function ajustarContraste(valor) {
      const intensidade = parseInt(valor);
      // Ajusta a cor de fundo com base no valor do contraste
      document.documentElement.style.setProperty('--bg-color', `rgb(0, ${Math.min(77, intensidade/2)}, ${Math.min(64, intensidade/2)})`);
      // Atualiza o valor no banco de dados
      salvarPreferenciasUsuario();
    }

    // Navegação entre telas
    function irPara(telaId, registrarHistorico = true) {
  document.querySelectorAll('.container').forEach(div => div.classList.remove('active'));
  document.getElementById(telaId).classList.add('active');

  if (leituraAtiva) setTimeout(lerConteudoAtual, 300);

  if (registrarHistorico) {
    history.pushState({ tela: telaId }, '', '');
  }

  // Se quiser: lógica personalizada por tela
  if (telaId === 'tela3' && nomeUsuario) {
    const mensagem = document.querySelector('#tela3 .speech-box p');
    mensagem.textContent = `Olá ${nomeUsuario}! Vamos começar com os conceitos básicos de HTML, CSS e JavaScript.`;
    if (!leituraAtiva) lerTexto(mensagem.textContent);
  }
     registrarNavegacao(telaId);
}
    
    window.addEventListener('popstate', function(event) {
  if (event.state && event.state.tela) {
    irPara(event.state.tela, false); // não adiciona no histórico novamente
  }
});
    

    // Validação do formulário da tela 2
    function validarEAvancar() {
      const nome = document.getElementById('nome').value.trim();
      if (nome === '') {
        alert('Por favor, informe seu nome para continuar.');
        document.getElementById('nome').focus();
        return;
      }
      
      // Verifica se o nome já existe no banco de dados
      if (verificarNomeExistente(nome)) {
        alert('Este nome de usuário já está cadastrado. Por favor, escolha outro nome.');
        document.getElementById('nome').focus();
        return;
      }
      
      // Salva o nome do usuário
      nomeUsuario = nome;
      
      // Salva os dados no banco de dados
      salvarDadosUsuario();
      
      // Avança para a próxima tela
      irPara('tela3');
    }
    
    // Verifica se o nome já existe no banco de dados
    function verificarNomeExistente(nome) {
      return bancoDeDados.usuarios.some(usuario => usuario.nome.toLowerCase() === nome.toLowerCase());
    }

    // Mostrar informações sobre o VOZETA
    function mostrarInfo() {
      alert('O VOZETA é uma plataforma de ensino de programação acessível com comandos por voz, focada em HTML, CSS e JavaScript.');
    }

    // Voltar para a tela 3
    function voltarParaTela3() {
      irPara('tela3');
    }

    // Próxima lição
    function proximaLicao() {
      alert('Próxima lição em desenvolvimento. Fique atento às atualizações!');
      progressoUsuario.aulas_concluidas++;
      salvarProgressoUsuario();
    }

    // Funções de integração com banco de dados simulado
    function salvarDadosUsuario() {
      console.log(`Salvando dados do usuário: ${nomeUsuario}`);
      
      // Adiciona ao banco de dados simulado
      bancoDeDados.usuarios.push({
        nome: nomeUsuario,
        data_cadastro: new Date().toISOString()
      });
      
      console.log('Usuários cadastrados:', bancoDeDados.usuarios);
      
      // Simulação de API para banco de dados real
      fetch('https://api.vozeta.com/usuarios', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          nome: nomeUsuario,
          data_cadastro: new Date().toISOString()
        })
      }).catch(erro => {
        console.log('Erro ao salvar dados (simulação):', erro);
      });
    }

    function salvarPreferenciasUsuario() {
      if (!nomeUsuario) return;
      
      const preferencias = {
        usuario: nomeUsuario,
        velocidade_fala: velocidadeFala,
        contraste: document.getElementById('contraste').value,
        data_atualizacao: new Date().toISOString()
      };
      
      // Atualiza ou adiciona preferências no banco de dados simulado
      const index = bancoDeDados.preferencias.findIndex(p => p.usuario === nomeUsuario);
      if (index >= 0) {
        bancoDeDados.preferencias[index] = preferencias;
      } else {
        bancoDeDados.preferencias.push(preferencias);
      }
      
      console.log('Preferências atualizadas:', preferencias);
      
      // Simulação de API para banco de dados real
      fetch('https://api.vozeta.com/preferencias', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(preferencias)
      }).catch(erro => {
        console.log('Erro ao salvar preferências (simulação):', erro);
      });
    }

    function registrarNavegacao(tela) {
      if (!nomeUsuario) return;
      
      const navegacao = {
        usuario: nomeUsuario,
        tela: tela,
        timestamp: new Date().toISOString()
      };
      
      // Adiciona ao banco de dados simulado
      bancoDeDados.navegacao.push(navegacao);
      
      console.log('Navegação registrada:', navegacao);
      
      // Simulação de API para banco de dados real
      fetch('https://api.vozeta.com/navegacao', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(navegacao)
      }).catch(erro => {
        console.log('Erro ao registrar navegação (simulação):', erro);
      });
    }

    function salvarProgressoUsuario() {
      if (!nomeUsuario) return;
      
      const progresso = {
        usuario: nomeUsuario,
        aulas_concluidas: progressoUsuario.aulas_concluidas,
        ultimo_acesso: new Date().toISOString()
      };
      
      // Atualiza ou adiciona progresso no banco de dados simulado
      const index = bancoDeDados.progresso.findIndex(p => p.usuario === nomeUsuario);
      if (index >= 0) {
        bancoDeDados.progresso[index] = progresso;
      } else {
        bancoDeDados.progresso.push(progresso);
      }
      
      console.log('Progresso salvo:', progresso);
      
      // Simulação de API para banco de dados real
      fetch('https://api.vozeta.com/progresso', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(progresso)
      }).catch(erro => {
        console.log('Erro ao salvar progresso (simulação):', erro);
      });
    }

    // Inicialização
    document.addEventListener('DOMContentLoaded', function() {
      // Carrega as vozes disponíveis (necessário em alguns navegadores)
      if ('speechSynthesis' in window) {
        window.speechSynthesis.onvoiceschanged = function() {
          window.speechSynthesis.getVoices();
        };
      }
      
      // Inicializa os sliders com aparência correta
      document.querySelectorAll('input[type="range"]').forEach(slider => {
        const value = (slider.value - slider.min) / (slider.max - slider.min) * 100;
        slider.style.background = `linear-gradient(to right, var(--primary-color) ${value}%, var(--bg-color) ${value}%)`;
        
        slider.addEventListener('input', function() {
          const value = (this.value - this.min) / (this.max - this.min) * 100;
          this.style.background = `linear-gradient(to right, var(--primary-color) ${value}%, var(--bg-color) ${value}%)`;
        });
      });
    });
  
function executarHtml() {
  const codigo = document.getElementById('editorHtml').value.trim();
  const preview = document.getElementById('previewHtml');
  const container = document.getElementById('exportarContainer');

  const parser = new DOMParser();
  const doc = parser.parseFromString(codigo, 'text/html');

  const TAGS_VALIDAS = new Set([
    'html', 'head', 'body', 'title', 'meta', 'link', 'script', 'style',
    'h1', 'h2', 'h3', 'h4', 'h5', 'h6',
    'p', 'div', 'span', 'strong', 'em', 'br', 'hr',
    'ul', 'ol', 'li',
    'table', 'thead', 'tbody', 'tr', 'td', 'th',
    'a', 'img', 'button', 'input', 'textarea', 'label', 'form',
    'section', 'article', 'nav', 'header', 'footer', 'main'
  ]);

  const todasAsTags = Array.from(doc.body.querySelectorAll('*'));

  if (todasAsTags.length === 0) {
    preview.srcdoc = '';
    container.style.display = 'none';
    alert("Nenhuma tag HTML foi encontrada. Adicione as tags desejadas ao seu código.");
    return;
  }

  const tagInvalida = todasAsTags.find(el => !TAGS_VALIDAS.has(el.tagName.toLowerCase()));
  if (tagInvalida) {
    preview.srcdoc = '';
    container.style.display = 'none';
    alert(`<${tagInvalida.tagName.toLowerCase()}> não é uma tag válida em HTML.`);
    return;
  }

  // Se chegou aqui, está tudo certo
  preview.srcdoc = codigo;
  container.style.display = 'block';
}

function iniciarDitado() {
  const SR = window.SpeechRecognition || window.webkitSpeechRecognition;
  if (!SR) {
    alert("Seu navegador não suporta ditado por voz.");
    return;
  }

  const reconhecimento = new SR();
  reconhecimento.lang = 'pt-BR';
  reconhecimento.interimResults = false;
  reconhecimento.continuous = false;
  reconhecimento.maxAlternatives = 1;

  reconhecimento.onresult = function(event) {
    let comando = event.results[0][0].transcript.trim().toLowerCase();
    const textarea = document.getElementById('editorHtml');
    const cursorPos = textarea.selectionStart;

    // Interpreta comandos do tipo: "abrir tag h1 Olá Mundo fechar tag h1"
    if (comando.startsWith("abrir tag")) {
      // extrai a tag e o conteúdo
      const abrirMatch = comando.match(/abrir tag (\w+)\s+(.*?)\s+fechar tag \1/);
      if (abrirMatch) {
        const tag = abrirMatch[1];
        const conteudo = abrirMatch[2];
        comando = `<${tag}>${conteudo}</${tag}>`;
      }
    }

    // Insere no editor onde estiver o cursor
    const antes = textarea.value.slice(0, cursorPos);
    const depois = textarea.value.slice(cursorPos);
    textarea.value = antes + comando + depois;

    // Reposiciona o cursor
    const novaPosicao = cursorPos + comando.length;
    textarea.selectionStart = textarea.selectionEnd = novaPosicao;

    textarea.focus();
  };

  reconhecimento.onerror = function(event) {
    alert("Erro no reconhecimento de voz: " + event.error);
  };

  reconhecimento.start();
}

let leituraAtiva = false;

function ativarLeituraGlobal() {
  leituraAtiva = true;
  lerConteudoAtual();
}

function lerConteudoAtual() {
  const telaAtiva = document.querySelector('.container.active');
  if (!telaAtiva) return;
  let textoParaLer = '';
  telaAtiva.querySelectorAll('h1, h2, p, label, input[type="text"], textarea').forEach(el => {
    if (el.value) {
      textoParaLer += el.value + '. ';
    } else {
      textoParaLer += el.innerText + '. ';
    }
  });
  telaAtiva.querySelectorAll('button').forEach(botao => {
    const textoBotao = botao.innerText.trim();
    if (textoBotao) {
      textoParaLer += `Botão ${textoBotao}. `;
    }
  });
  lerTexto(textoParaLer);
}

function apagarCaractereComCursor() {
  const textarea = document.getElementById('editorHtml');
  const start = textarea.selectionStart;
  const end = textarea.selectionEnd;

  // Se há uma seleção, apaga tudo selecionado
  if (start !== end) {
    const antes = textarea.value.slice(0, start);
    const depois = textarea.value.slice(end);
    textarea.value = antes + depois;
    textarea.selectionStart = textarea.selectionEnd = start;
  } else if (start > 0) {
    // Apaga um caractere antes do cursor
    const antes = textarea.value.slice(0, start - 1);
    const depois = textarea.value.slice(end);
    textarea.value = antes + depois;
    textarea.selectionStart = textarea.selectionEnd = start - 1;
  }

  textarea.focus();
}

function exportarCodigo() {
  const codigo = document.getElementById('editorHtml').value;
  const blob = new Blob([codigo], { type: 'text/html;charset=utf-8' });
  const url = URL.createObjectURL(blob);

  const link = document.createElement('a');
  link.href = url;
  link.download = 'meu_codigo.html';
  link.click();

  URL.revokeObjectURL(url);
}

function inserirEsqueletoHtml() {
  const modelo = `<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Escreva aqui o título da sua página</title> <!-- Título da aba do navegador -->
</head>
<body>

    <h1>Escreva aqui o título principal da sua página</h1> <!-- Título visível na página -->

    <p>Escreva aqui o parágrafo de sua página</p> <!-- Parágrafo com seu conteúdo -->

</body>
</html>`;

  const textarea = document.getElementById('editorHtml');
  const cursorPos = textarea.selectionStart;
  const antes = textarea.value.slice(0, cursorPos);
  const depois = textarea.value.slice(cursorPos);

  textarea.value = antes + modelo + depois;

  // Atualiza posição do cursor
  textarea.selectionStart = textarea.selectionEnd = cursorPos + modelo.length;
  textarea.focus();
}

    document.addEventListener('DOMContentLoaded', function() {
  // 1. Carrega vozes de leitura (necessário em alguns navegadores)
  if ('speechSynthesis' in window) {
    window.speechSynthesis.onvoiceschanged = function() {
      window.speechSynthesis.getVoices();
    };
  }

  // 2. Inicializa gradiente e fonte do slider de texto
  const slider = document.getElementById('tamanhoTexto');
  if (slider) {
    const percent = ((slider.value - slider.min) / (slider.max - slider.min)) * 100;
    slider.style.background = `linear-gradient(to right, #007acc ${percent}%, #ccc ${percent}%)`;
    ajustarFonteGlobal(slider.value); // aplica valor inicial
  }

  // 3. Inicia histórico na tela1
  history.replaceState({ tela: 'tela1' }, '', '');
 
  // 4. Ativa leitura por hover (voz)
  configurarLeituraPorHover();
});

</script>
  
</body>
</html>
